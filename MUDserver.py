#!/usr/bin/env python
#------------------------------------------------------------------------------
#   MUDserver.py
#   
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain a
#   copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#------------------------------------------------------------------------------

"""
Simple MUD server using miniboa
"""

from miniboa import TelnetServer

from clientInfo import ClientInfo

import Engine, World
from cMove import alert

IDLE_TIMEOUT = 300
CLIENT_LIST = []
SERVER_RUN = True
CLIENT_DATA = {}


def on_connect(client):
    """
    Sample on_connect function.
    Handles new connections.
    """
    clientDataID = str(client.addrport())
    print "++ Opened connection to %s" % client.addrport()  
    #broadcast('%s connected.\n' % client.addrport() )
    CLIENT_LIST.append(client)
    clientID = len(CLIENT_LIST) - 1

    clientInfo = ClientInfo(name='none', prompt='>>', client=client, clientID=clientID)
    CLIENT_DATA[clientDataID] = clientInfo

    client.send("\nWelcome to the MUD!\nPlease tell us your name.\n%s" % str(CLIENT_DATA[clientDataID].prompt))


def on_disconnect(client):
    """
    Sample on_disconnect function.
    Handles lost connections.
    """
    clientDataID = str(client.addrport())
    player = CLIENT_DATA[clientDataID].avatar
    print "-- Lost connection to %s" % client.addrport()
    CLIENT_LIST.remove(client)
    player.currentRoom.players.remove(player)
    alert(client, CLIENT_DATA, ("\n^g%s disappeared.^~\n" %player.name))

    #broadcast('%s leaves the conversation.\n' % client.addrport() )


def kick_idle():
    """
    Looks for idle clients and disconnects them by setting active to False.
    """
    ## Who hasn't been typing?
    for client in CLIENT_LIST:
        if client.idle() > IDLE_TIMEOUT:
            print('>> Kicking idle lobby client from %s' % client.addrport())
            client.active = False


def broadcast(msg):
    """
    Send msg to every client.
    """
    for client in CLIENT_LIST:
        client.send(msg)




 


#------------------------------------------------------------------------------
#       Main
#------------------------------------------------------------------------------

if __name__ == '__main__':


    ## Create a telnet server with a port, address,
    ## a function to call with new connections
    ## and one to call with lost connections.

    '''address should be a blank string for deployment across a network, and localhost for testing on one machine'''
    telnet_server = TelnetServer(
        port=7777,
        address='localhost',
        on_connect=on_connect,
        on_disconnect=on_disconnect,
        timeout = .05
        )

    world = World.World(regions = ['test'])

    print(">> Listening for connections on port %d.  CTRL-C to break."
        % telnet_server.port)

    ## Server Loop
    while SERVER_RUN:
        telnet_server.poll()        ## Send, Recv, and look for new connections
        kick_idle()                 ## Check for idle clients
        engineState = Engine.process_clients(SERVER_RUN, CLIENT_LIST, CLIENT_DATA)           ## Check for client input, saving any state changes generated by the engine to 'engineState'

        if engineState == 'shutdown':
            #print engineState
            SERVER_RUN = False

    print("<< Server shutdown.")
